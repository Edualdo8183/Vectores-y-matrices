Primer ejercicio 
import numpy as np

def es_matriz_identidad(matriz):
    filas, columnas = matriz.shape
    if filas != columnas:
        return False
    for i in range(filas):
        for j in range(columnas):
            if i == j and matriz[i, j] != 1:
                return False
            elif i != j and matriz[i, j] != 0:
                return False
    return True

matriz = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
if es_matriz_identidad(matriz):
    print("La matriz es identidad.")
else:
    print("La matriz no es identidad.")

Sin numpty
def es_matriz_identidad(matriz):
    filas = len(matriz)
    columnas = len(matriz[0])
    if filas != columnas:
        return False
    for i in range(filas):
        for j in range(columnas):
            if i == j and matriz[i][j] != 1:
                return False
            elif i != j and matriz[i][j] != 0:
                return False
    return True

matriz = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
if es_matriz_identidad(matriz):
    print("La matriz es identidad.")
else:
    print("La matriz no es identidad.")

Segundo ejercicio:
import numpy as np

def rotar_matriz_90(matriz):
    return np.rot90(matriz, k=-1)

matriz = np.array([[1, 2, 3],
                   [4, 5, 6],
                   [7, 8, 9]])

print("Matriz original:")
print(matriz)

print("Matriz rotada 90 grados:")
print(rotar_matriz_90(matriz))

Tercer ejercicio:
import numpy as np

A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])
C = np.dot(A, B)
print(C)

Cuarto ejercicio:
import numpy as np

filas = int(input("Ingrese el número de filas: "))
columnas = int(input("Ingrese el número de columnas(Tienes que ingresar valor por valor: "))

if filas > 0 and columnas > 0:
    def ingresar_matriz(filas, columnas):
        return np.array([[int(input()) for _ in range(columnas)] for _ in range(filas)])

    matriz1 = ingresar_matriz(filas, columnas)
    matriz2 = ingresar_matriz(filas, columnas)

    print(matriz1)
    print(matriz2)

    if np.array_equal(matriz1, matriz2):
        print("Las matrices son iguales.")
    else:
        print("Las matrices son diferentes.")
else:
    print("El número de filas y columnas debe ser mayor que 0.")


Sexto ejercicio:
import numpy as np
matriz = np.array([[1, 2], [3, 4]])
inversa = np.linalg.inv(matriz)
determinante = np.linalg.det(matriz)
print(inversa)
print(determinante)

Septimp ejercicio:
import numpy as np

A = np.array([list(map(int, input(f"Introduce los elementos de la fila 1 de la matriz A separados por espacios: ").split())),
              list(map(int, input(f"Introduce los elementos de la fila 2 de la matriz A separados por espacios: ").split()))])

B = np.array([list(map(int, input(f"Introduce los elementos de la fila 1 de la matriz B separados por espacios: ").split())),
              list(map(int, input(f"Introduce los elementos de la fila 2 de la matriz B separados por espacios: ").split()))])

concat_filas = np.vstack((A, B))
concat_columnas = np.hstack((A, B))

print("\nMatriz A:")
print(A)
print("\nMatriz B:")
print(B)
print("\nConcatenación por filas:")
print(concat_filas)
print("\nConcatenación por columnas:")
print(concat_columnas)


Octavo ejercicio:
import numpy as np

x = [1, 2, 3, 4, 5]
y = [5, 4, 6, 7, 8]

covarianza = np.cov(x, y)[0][1]
correlacion = np.corrcoef(x, y)[0][1]

print(covarianza)
print(correlacion)

Noveno ejercicio:
A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
B = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]
C = [[A[i][j] + B[i][j] for j in range(len(A[0]))] for i in range(len(A))]

for fila in C:
    print(fila)

Decimo ejercicio:
import numpy as np

A = np.array([[1, 2], [3, 4], [5, 6]]) 
V = np.array([1, 2]) 

if A.shape[1] == V.shape[0]:
    R = np.dot(A, V)
    print(R)
else:
    print("Imcompatible") 

Undecimo ejercicio:
A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
traspuesta = [[A[j][i] for j in range(len(A))] for i in range(len(A[0]))]
print(traspuesta)

Ejercicio de prueba 
import numpy as np

inventario = np.array([
    [10, 20],
    [15, 30],
    [5, 50]
])

valores_por_producto = inventario[:, 0] * inventario[:, 1]
valor_total = np.sum(valores_por_producto)

print(valores_por_producto)
print(valor_total) 